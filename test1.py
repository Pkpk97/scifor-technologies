# -*- coding: utf-8 -*-
"""test1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mONAuqepFKz5iOSXQn7iIiB-LLRFrzse
"""



"""Q1.In object oriented programming its based on objects. objects contains data in form of attributes and code in the form of methods. object oriented are various but the most popular ones are class based, meaning that objects are instances of classes.
in procedural programming which is structured programming,the program os divided into smaller parts called fuctions, and it foloows topdown approach.

Q2.principle of oops
  we use class and objects and implement in real world entities like encapsulaton, inheritance, polymorphism. the main concept is to bind code and data together as one.
  encapsulation: here we bind code and data together within one unit.and data abstraction is achieved through encapsulation.
  inheritance: most important about inheritance is, it specifies the child object aquires all the properties and behaviour of parent object.
  polymorphism: in simple poly means many and morph means ways. one task can be performed in different ways.

Q3.purpose of self keyword to represent instance of the class,by self. it binds
  attribute with given arguments.
  ex: class animal:
      def__init__(self,name):
      self.name=name
      def speak(self)
      pass
      class dog(animal):
      def bark(self):
      return "bow"
      my_dog=dog("bro")
      print("my dog name is{my_dog.name}")
      my_dog.speak()
      my_dog.bark()

Q4.method overriding ,which allows to override methods of exixting class.by without creating new class. two types static and dynamic. static overriding means that we can override a methos once on same object.
in dynamic more than once.

Q5. class variable are defined with in the class but outside of any class methods, instance variable are defined within class methods, typically the contructor.

Q6. abstract class are blueprint of other classes.
    ex: class animal:
        @abstractmethod
        def one(self):
            pass
            def two(self):
            print("method")

Q7.super function return an object that represents the parent class.
    and also used to give access to methods and properties of a parent or sibling class.


Q8.Using of mutiple inheritance makes easy to organize classes. but challenges means its quite possible that your inheriting classes could have methods at same name.

Q9.decorator allows to add new functionality to already created object ,without changing its structure , and it is called before function is called.


  
"""